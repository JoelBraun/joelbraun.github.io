<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-06-07T13:09:31-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Joel Braun</title><subtitle></subtitle><author><name>Joel Braun</name></author><entry><title type="html">A More Definitive Guide to Mobile SSO</title><link href="http://localhost:4000/2020/05/29/a-more-definitive-guide-to-mobile-sso.html" rel="alternate" type="text/html" title="A More Definitive Guide to Mobile SSO" /><published>2020-05-29T00:00:00-07:00</published><updated>2020-05-29T00:00:00-07:00</updated><id>http://localhost:4000/2020/05/29/a-more-definitive-guide-to-mobile-sso</id><content type="html" xml:base="http://localhost:4000/2020/05/29/a-more-definitive-guide-to-mobile-sso.html">&lt;p&gt;Lately I was a little frustrated with the lack of online resources which effectively describe how to effectively leverage session-based SSO on mobile platforms.&lt;/p&gt;</content><author><name>Joel Braun</name></author><category term="OAuth" /><category term="Single Sign On" /><category term="OpenIDConnect" /><summary type="html">Lately I was a little frustrated with the lack of online resources which effectively describe how to effectively leverage session-based SSO on mobile platforms.</summary></entry><entry><title type="html">Why You Should Prefer OAuth Scope Validation Over Audience Validation</title><link href="http://localhost:4000/2020/05/09/validating-oauth-audiences-and-scopes.html" rel="alternate" type="text/html" title="Why You Should Prefer OAuth Scope Validation Over Audience Validation" /><published>2020-05-09T00:00:00-07:00</published><updated>2020-05-09T00:00:00-07:00</updated><id>http://localhost:4000/2020/05/09/validating-oauth-audiences-and-scopes</id><content type="html" xml:base="http://localhost:4000/2020/05/09/validating-oauth-audiences-and-scopes.html">&lt;p&gt;I often receive the question of how OAuth token audience validation should work in environments where multiple OAuth clients are calling multiple resource services. Generally, the audience or &lt;code class=&quot;highlighter-rouge&quot;&gt;aud&lt;/code&gt; claim in OAuth represents the application to which the OAuth token was issued. This can be handy as an additional layer of token validation for certain types of applications (say you have a single, monolithic application architecture with no additional services). However, validating the audience claim quickly starts to increase in complexity when multiple clients and services enter the mix.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-05-09-validating-oauth-audiences-and-scopes/audience.svg&quot; alt=&quot;audience validation&quot; title=&quot;Audience validation diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As the number of applications in a service ecosystem scale, requiring audience validation forces all applications to track and validate against all audiences, often individual clients, which have been introduced. As new OAuth clients (with their new audiences) are created, this rapidly becomes an unwieldy task. One erroneous approach to correct this issue is to &lt;a href=&quot;https://github.com/IdentityServer/IdentityServer3/issues/1365&quot;&gt;try issuing multiple audiences in tokens&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s a better alternative, which is to simply rely on scope validation. Rather than requiring each application accepting OAuth tokens to maintain knowledge of all possible clients, you can validate &lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt; in a token instead. The &lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt; array of values within a token represent the resources to which the token has access. This effectively inverts the dependency - rather than resources having to know what will call them, the IdP pre-determines which resources are allowed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-05-09-validating-oauth-audiences-and-scopes/scope.svg&quot; alt=&quot;scope validation&quot; title=&quot;Scope validation diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In practice, this proves to be a much better model as new client applications and resource services are added. Additionally, the list of scopes allowed for each client provides a effective form of ‘documentation’ for determining the resources upon which a particular client depends.&lt;/p&gt;

&lt;p&gt;One of the common sources of this confusion is Microsoft’s own JWT authorization libraries, both for ASP.NET and ASP.NET Core. Rather than providing scope validation by default, they provide audience validation. &lt;a href=&quot;https://github.com/IdentityServer/IdentityServer4.AccessTokenValidation/blob/master/src/AuthorizationPolicyExtensions.cs&quot;&gt;A separate piece of middleware&lt;/a&gt; is required to implement scope validation (but highly recommended!).&lt;/p&gt;

&lt;p&gt;Interestingly, the &lt;a href=&quot;https://tools.ietf.org/html/rfc6749&quot;&gt;OAuth 2 Authorization Framework RFC&lt;/a&gt; only mentions audience validation as a security mechanism for applications using less secure flows, such as implicit. All other references in the document use the term scope to describe the resource authorization property of an access token.&lt;/p&gt;</content><author><name>Joel Braun</name></author><category term="OAuth" /><category term="Audiences" /><category term="Scopes" /><summary type="html">I often receive the question of how OAuth token audience validation should work in environments where multiple OAuth clients are calling multiple resource services. Generally, the audience or aud claim in OAuth represents the application to which the OAuth token was issued. This can be handy as an additional layer of token validation for certain types of applications (say you have a single, monolithic application architecture with no additional services). However, validating the audience claim quickly starts to increase in complexity when multiple clients and services enter the mix.</summary></entry><entry><title type="html">The Summer of JavaScript</title><link href="http://localhost:4000/2018/06/04/summer-of-javascript.html" rel="alternate" type="text/html" title="The Summer of JavaScript" /><published>2018-06-04T00:00:00-07:00</published><updated>2018-06-04T00:00:00-07:00</updated><id>http://localhost:4000/2018/06/04/summer-of-javascript</id><content type="html" xml:base="http://localhost:4000/2018/06/04/summer-of-javascript.html">&lt;p&gt;Day to day, I work on the modern Microsoft stack - .NET Core, MSSQL, Linux/Docker, and building out both cloud and security initiatives at my organization. I love my place on the backend side of things, and typically don’t stray far from that area.&lt;/p&gt;

&lt;p&gt;Ever so occasionally, it’s necessary to dip my toes into JS to finish some light frontend work. Javascript doesn’t have a strong reputation on my team (to put it mildly) despite its popularity. I’m curious to find out whether that reputation is well-founded.&lt;/p&gt;

&lt;p&gt;Over the next couple of months, I’ll be immersing myself in the world of JS development, both frontend and backend. I’ve taken the time to update my newsfeeds to include information from some content experts and JS communities. I’ll try to take time and share some of my experiences and observations on this page as well.&lt;/p&gt;

&lt;p&gt;Summer is always a good time to experiment a little with new technologies. The days are longer, so you have more time to troubleshoot the weird things you find. (I attribute the success of the long ago &lt;em&gt;Summer of Linux&lt;/em&gt; to this.) My hope is that this one will prove just as informative and practically useful for me.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=w5YI9ahUgnk&amp;amp;t=18s&quot;&gt;&lt;em&gt;I proclaim this the “Summer of JavaScript”.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Joel Braun</name></author><category term="Summer of JavaScript" /><summary type="html">Day to day, I work on the modern Microsoft stack - .NET Core, MSSQL, Linux/Docker, and building out both cloud and security initiatives at my organization. I love my place on the backend side of things, and typically don’t stray far from that area.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/jsimg.png" /><media:content medium="image" url="http://localhost:4000/jsimg.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>